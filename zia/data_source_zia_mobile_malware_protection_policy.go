package zia

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zscaler/zscaler-sdk-go/v3/zscaler/zia/services/mobile_threat_settings"
)

func dataSourceMobileMalwareProtectionPolicy() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceMobileMalwareProtectionPolicyRead,
		Schema: map[string]*schema.Schema{
			"block_apps_with_malicious_activity": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "Blocks applications that contain vulnerabilities or that use insecure features, modules, or protocols",
			},
			"block_apps_with_known_vulnerabilities": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "Blocks an application from leaking a user's credentials in an unencrypted format",
			},
			"block_apps_sending_unencrypted_user_credentials": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "Blocks an application from leaking device location details via communication in an unencrypted format or for an unknown purpose",
			},
			"block_apps_sending_location_info": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "Blocks an application from leaking a user's personally identifiable information (PII) via communication in an unencrypted format or for an unknown purpose",
			},
			"block_apps_sending_personally_identifiable_info": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "Blocks an application from leaking device identifiers via communication in an unencrypted format or for an unknown purpose",
			},
			"block_apps_sending_device_identifier": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "Blocks an application from communicating with known advertisement websites",
			},
			"block_apps_communicating_with_ad_websites": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "Blocks an application from communicating with unknown servers (i.e., servers not normally or historically associated with the application)",
			},
			"block_apps_communicating_with_remote_unknown_servers": {
				Type:     schema.TypeBool,
				Computed: true,
			},
		},
	}
}

func dataSourceMobileMalwareProtectionPolicyRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	res, err := mobile_threat_settings.GetMobileThreatSettings(ctx, service)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("mobile_settings")
	_ = d.Set("block_apps_with_malicious_activity", res.BlockAppsWithMaliciousActivity)
	_ = d.Set("block_apps_with_known_vulnerabilities", res.BlockAppsWithKnownVulnerabilities)
	_ = d.Set("block_apps_sending_unencrypted_user_credentials", res.BlockAppsSendingUnencryptedUserCredentials)
	_ = d.Set("block_apps_sending_location_info", res.BlockAppsSendingLocationInfo)
	_ = d.Set("block_apps_sending_personally_identifiable_info", res.BlockAppsSendingPersonallyIdentifiableInfo)
	_ = d.Set("block_apps_sending_device_identifier", res.BlockAppsSendingDeviceIdentifier)
	_ = d.Set("block_apps_communicating_with_ad_websites", res.BlockAppsCommunicatingWithAdWebsites)
	_ = d.Set("block_apps_communicating_with_remote_unknown_servers", res.BlockAppsCommunicatingWithRemoteUnknownServers)
	return nil
}
