package zia

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

func TestAccResourceATPMalwareProtocols_Basic(t *testing.T) {
	resourceName := "zia_atp_malware_protocols.test"

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckResourceATPMalwareProtocolsDestroy,
		Steps: []resource.TestStep{
			// Step 1: Create the resource with specific values
			{
				Config: testAccResourceATPMalwareProtocolsConfig(false, false, false),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "inspect_http", "false"),
					resource.TestCheckResourceAttr(resourceName, "inspect_ftp_over_http", "false"),
					resource.TestCheckResourceAttr(resourceName, "inspect_ftp", "false"),
				),
			},
			// Step 2: Update the resource with new values
			{
				Config: testAccResourceATPMalwareProtocolsConfig(true, true, true),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "inspect_http", "true"),
					resource.TestCheckResourceAttr(resourceName, "inspect_ftp_over_http", "true"),
					resource.TestCheckResourceAttr(resourceName, "inspect_ftp", "true"),
				),
			},
			// Step 3: Import the resource and verify the state
			{
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccCheckResourceATPMalwareProtocolsDestroy(s *terraform.State) error {
	// Implement if there's anything to check upon resource destruction
	return nil
}

// Helper function to generate test configuration for the resource
func testAccResourceATPMalwareProtocolsConfig(inspectHttp, inspectFtpOverHttp, inspectFtp bool) string {
	return fmt.Sprintf(`
resource "zia_atp_malware_protocols" "test" {
  inspect_http  = %t
  inspect_ftp_over_http = %t
  inspect_ftp = %t
}
`, inspectHttp, inspectFtpOverHttp, inspectFtp)
}
