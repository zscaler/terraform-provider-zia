package zia

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

func TestAccResourceMobileMalwareProtectionPolicy_Basic(t *testing.T) {
	resourceName := "zia_mobile_malware_protection_policy.test"

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckResourceMobileMalwareProtectionPolicyDestroy,
		Steps: []resource.TestStep{
			// Step 1: Create the resource with specific values
			{
				Config: testAccResourceMobileMalwareProtectionPolicyConfig(false, false, false, false, false, false, false, false),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "block_apps_with_malicious_activity", "false"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_with_known_vulnerabilities", "false"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_sending_unencrypted_user_credentials", "false"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_sending_location_info", "false"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_sending_personally_identifiable_info", "false"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_sending_device_identifier", "false"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_communicating_with_ad_websites", "false"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_communicating_with_remote_unknown_servers", "false"),
				),
			},
			// Step 2: Update the resource with new values
			{
				Config: testAccResourceMobileMalwareProtectionPolicyConfig(true, true, true, true, true, true, true, true),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "block_apps_with_malicious_activity", "true"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_with_known_vulnerabilities", "true"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_sending_unencrypted_user_credentials", "true"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_sending_location_info", "true"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_sending_personally_identifiable_info", "true"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_sending_device_identifier", "true"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_communicating_with_ad_websites", "true"),
					resource.TestCheckResourceAttr(resourceName, "block_apps_communicating_with_remote_unknown_servers", "true"),
				),
			},
			// Step 3: Import the resource and verify the state
			{
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccCheckResourceMobileMalwareProtectionPolicyDestroy(s *terraform.State) error {
	// Implement if there's anything to check upon resource destruction
	return nil
}

// Helper function to generate test configuration for the resource
func testAccResourceMobileMalwareProtectionPolicyConfig(block1, block2, block3, block4, block5, block6, block7, block8 bool) string {
	return fmt.Sprintf(`
resource "zia_mobile_malware_protection_policy" "test" {
	block_apps_with_malicious_activity = %t
	block_apps_with_known_vulnerabilities = %t
	block_apps_sending_unencrypted_user_credentials = %t
	block_apps_sending_location_info = %t
	block_apps_sending_personally_identifiable_info = %t
	block_apps_sending_device_identifier = %t
	block_apps_communicating_with_ad_websites = %t
	block_apps_communicating_with_remote_unknown_servers = %t
}
`, block1, block2, block3, block4, block5, block6, block7, block8)
}
