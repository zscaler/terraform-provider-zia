package zia

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zscaler/zscaler-sdk-go/v3/zscaler/zia/services/malware_protection"
)

func dataSourceATPMalwarePolicy() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceATPMalwarePolicyRead,
		Schema: map[string]*schema.Schema{
			"block_unscannable_files": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value indicating whether to allow or block users from uploading or downloading files that the Zscaler service is unable to scan.",
			},
			"block_password_protected_archive_files": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value indicating whether to allow or block users from uploading or downloading password-protected files",
			},
		},
	}
}

func dataSourceATPMalwarePolicyRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	resp, err := malware_protection.GetATPMalwarePolicy(ctx, service)
	if err != nil {
		return nil
	}

	if resp != nil {
		d.SetId("inspection")
		_ = d.Set("block_unscannable_files", resp.BlockUnscannableFiles)
		_ = d.Set("block_password_protected_archive_files", resp.BlockPasswordProtectedArchiveFiles)

	} else {
		return diag.FromErr(fmt.Errorf("couldn't read atp malware policy options"))
	}

	return nil
}
