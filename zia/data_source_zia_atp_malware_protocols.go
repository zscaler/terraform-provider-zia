package zia

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zscaler/zscaler-sdk-go/v3/zscaler/zia/services/malware_protection"
)

func dataSourceATPMalwareProtocols() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceATPMalwareProtocolsRead,
		Schema: map[string]*schema.Schema{
			"inspect_http": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for malicious content in real time",
			},
			"inspect_ftp_over_http": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time",
			},
			"inspect_ftp": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time",
			},
		},
	}
}

func dataSourceATPMalwareProtocolsRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	resp, err := malware_protection.GetATPMalwareProtocols(ctx, service)
	if err != nil {
		return nil
	}

	if resp != nil {
		d.SetId("protocol")
		_ = d.Set("inspect_http", resp.InspectHttp)
		_ = d.Set("inspect_ftp_over_http", resp.InspectFtpOverHttp)
		_ = d.Set("inspect_ftp", resp.InspectFtp)

	} else {
		return diag.FromErr(fmt.Errorf("couldn't read atp malware protocol setting options"))
	}

	return nil
}
