package zia

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zscaler/zscaler-sdk-go/v3/zscaler/zia/services/malware_protection"
)

func resourceATPMalwareInspection() *schema.Resource {
	return &schema.Resource{
		ReadContext:   resourceATPMalwareInspectionRead,
		CreateContext: resourceATPMalwareInspectionCreate,
		UpdateContext: resourceATPMalwareInspectionUpdate,
		DeleteContext: resourceFuncNoOp,
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
				diags := resourceATPMalwareInspectionRead(ctx, d, meta)
				if diags.HasError() {
					return nil, fmt.Errorf("failed to read atp malware inspection import: %s", diags[0].Summary)
				}
				d.SetId("inspection")
				return []*schema.ResourceData{d}, nil
			},
		},
		Schema: map[string]*schema.Schema{
			"inspect_inbound": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value that enables or disables scanning of incoming internet traffic for malicious content",
			},
			"inspect_outbound": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value that enables or disables scanning of outgoing internet traffic for malicious content",
			},
		},
	}
}

func resourceATPMalwareInspectionCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	inspection := malware_protection.ATPMalwareInspection{
		InspectInbound:  d.Get("inspect_inbound").(bool),
		InspectOutbound: d.Get("inspect_outbound").(bool),
	}

	_, _, err := malware_protection.UpdateATPMalwareInspection(ctx, service, inspection)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId("inspection")

	// Sleep for 1 seconds before potentially triggering the activation
	time.Sleep(1 * time.Second)

	// Check if ZIA_ACTIVATION is set to a truthy value before triggering activation
	if shouldActivate() {
		if activationErr := triggerActivation(ctx, zClient); activationErr != nil {
			return diag.FromErr(activationErr)
		}
	} else {
		log.Printf("[INFO] Skipping configuration activation due to ZIA_ACTIVATION env var not being set to true.")
	}

	return resourceATPMalwareInspectionRead(ctx, d, meta)
}

func resourceATPMalwareInspectionRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	resp, err := malware_protection.GetATPMalwareInspection(ctx, service)
	if err != nil {
		return nil
	}

	if resp != nil {
		d.SetId("inspection")
		_ = d.Set("inspect_inbound", resp.InspectInbound)
		_ = d.Set("inspect_outbound", resp.InspectOutbound)

	} else {
		return diag.FromErr(fmt.Errorf("couldn't read atp malware inspection"))
	}

	return nil
}

func resourceATPMalwareInspectionUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	inspection := malware_protection.ATPMalwareInspection{
		InspectInbound:  d.Get("inspect_inbound").(bool),
		InspectOutbound: d.Get("inspect_outbound").(bool),
	}

	_, _, err := malware_protection.UpdateATPMalwareInspection(ctx, service, inspection)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("inspection")

	// Sleep for 1 seconds before potentially triggering the activation
	time.Sleep(1 * time.Second)

	// Check if ZIA_ACTIVATION is set to a truthy value before triggering activation
	if shouldActivate() {
		if activationErr := triggerActivation(ctx, zClient); activationErr != nil {
			return diag.FromErr(activationErr)
		}
	} else {
		log.Printf("[INFO] Skipping configuration activation due to ZIA_ACTIVATION env var not being set to true.")
	}

	return resourceATPMalwareInspectionRead(ctx, d, meta)
}
