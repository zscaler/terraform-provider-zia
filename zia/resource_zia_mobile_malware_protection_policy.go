package zia

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zscaler/zscaler-sdk-go/v3/zscaler/zia/services/mobile_threat_settings"
)

func resourceMobileMalwareProtectionPolicy() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceMobileMalwareProtectionPolicyCreate,
		ReadContext:   resourceMobileMalwareProtectionPolicyRead,
		UpdateContext: resourceMobileMalwareProtectionPolicyUpdate,
		DeleteContext: resourceFuncNoOp,
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
				diags := resourceMobileMalwareProtectionPolicyRead(ctx, d, meta)
				if diags.HasError() {
					return nil, fmt.Errorf("failed to read mobile malware protection policy import: %s", diags[0].Summary)
				}
				d.SetId("mobile_settings")
				return []*schema.ResourceData{d}, nil
			},
		},
		Schema: map[string]*schema.Schema{
			"block_apps_with_malicious_activity": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Blocks applications that contain vulnerabilities or that use insecure features, modules, or protocols",
			},
			"block_apps_with_known_vulnerabilities": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Blocks an application from leaking a user's credentials in an unencrypted format",
			},
			"block_apps_sending_unencrypted_user_credentials": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Blocks an application from leaking device location details via communication in an unencrypted format or for an unknown purpose",
			},
			"block_apps_sending_location_info": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Blocks an application from leaking a user's personally identifiable information (PII) via communication in an unencrypted format or for an unknown purpose",
			},
			"block_apps_sending_personally_identifiable_info": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Blocks an application from leaking device identifiers via communication in an unencrypted format or for an unknown purpose",
			},
			"block_apps_sending_device_identifier": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Blocks an application from communicating with known advertisement websites",
			},
			"block_apps_communicating_with_ad_websites": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Blocks an application from communicating with unknown servers (i.e., servers not normally or historically associated with the application)",
			},
			"block_apps_communicating_with_remote_unknown_servers": {
				Type:     schema.TypeBool,
				Optional: true,
			},
		},
	}
}

func resourceMobileMalwareProtectionPolicyCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	mobile := mobile_threat_settings.MobileAdvanceThreatSettings{
		BlockAppsWithMaliciousActivity:                 d.Get("block_apps_with_malicious_activity").(bool),
		BlockAppsWithKnownVulnerabilities:              d.Get("block_apps_with_known_vulnerabilities").(bool),
		BlockAppsSendingUnencryptedUserCredentials:     d.Get("block_apps_sending_unencrypted_user_credentials").(bool),
		BlockAppsSendingLocationInfo:                   d.Get("block_apps_sending_location_info").(bool),
		BlockAppsSendingPersonallyIdentifiableInfo:     d.Get("block_apps_sending_personally_identifiable_info").(bool),
		BlockAppsSendingDeviceIdentifier:               d.Get("block_apps_sending_device_identifier").(bool),
		BlockAppsCommunicatingWithAdWebsites:           d.Get("block_apps_communicating_with_ad_websites").(bool),
		BlockAppsCommunicatingWithRemoteUnknownServers: d.Get("block_apps_communicating_with_remote_unknown_servers").(bool),
	}

	_, _, err := mobile_threat_settings.UpdateMobileThreatSettings(ctx, service, mobile)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId("mobile_settings")

	// Sleep for 1 seconds before potentially triggering the activation
	time.Sleep(1 * time.Second)

	// Check if ZIA_ACTIVATION is set to a truthy value before triggering activation
	if shouldActivate() {
		if activationErr := triggerActivation(ctx, zClient); activationErr != nil {
			return diag.FromErr(activationErr)
		}
	} else {
		log.Printf("[INFO] Skipping configuration activation due to ZIA_ACTIVATION env var not being set to true.")
	}

	return resourceMobileMalwareProtectionPolicyRead(ctx, d, meta)
}

func resourceMobileMalwareProtectionPolicyRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	resp, err := mobile_threat_settings.GetMobileThreatSettings(ctx, service)
	if err != nil {
		return diag.FromErr(err)
	}

	if resp != nil {
		d.SetId("mobile_settings")
		_ = d.Set("block_apps_with_malicious_activity", resp.BlockAppsWithMaliciousActivity)
		_ = d.Set("block_apps_with_known_vulnerabilities", resp.BlockAppsWithKnownVulnerabilities)
		_ = d.Set("block_apps_sending_unencrypted_user_credentials", resp.BlockAppsSendingUnencryptedUserCredentials)
		_ = d.Set("block_apps_sending_location_info", resp.BlockAppsSendingLocationInfo)
		_ = d.Set("block_apps_sending_personally_identifiable_info", resp.BlockAppsSendingPersonallyIdentifiableInfo)
		_ = d.Set("block_apps_sending_device_identifier", resp.BlockAppsSendingDeviceIdentifier)
		_ = d.Set("block_apps_communicating_with_ad_websites", resp.BlockAppsCommunicatingWithAdWebsites)
		_ = d.Set("block_apps_communicating_with_remote_unknown_servers", resp.BlockAppsCommunicatingWithRemoteUnknownServers)

	} else {
		return diag.FromErr(fmt.Errorf("couldn't read mobile malware protection policy"))
	}

	return nil
}

func resourceMobileMalwareProtectionPolicyUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	mobile := mobile_threat_settings.MobileAdvanceThreatSettings{
		BlockAppsWithMaliciousActivity:                 d.Get("block_apps_with_malicious_activity").(bool),
		BlockAppsWithKnownVulnerabilities:              d.Get("block_apps_with_known_vulnerabilities").(bool),
		BlockAppsSendingUnencryptedUserCredentials:     d.Get("block_apps_sending_unencrypted_user_credentials").(bool),
		BlockAppsSendingLocationInfo:                   d.Get("block_apps_sending_location_info").(bool),
		BlockAppsSendingPersonallyIdentifiableInfo:     d.Get("block_apps_sending_personally_identifiable_info").(bool),
		BlockAppsSendingDeviceIdentifier:               d.Get("block_apps_sending_device_identifier").(bool),
		BlockAppsCommunicatingWithAdWebsites:           d.Get("block_apps_communicating_with_ad_websites").(bool),
		BlockAppsCommunicatingWithRemoteUnknownServers: d.Get("block_apps_communicating_with_remote_unknown_servers").(bool),
	}

	_, _, err := mobile_threat_settings.UpdateMobileThreatSettings(ctx, service, mobile)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("mobile_settings")

	// Sleep for 1 seconds before potentially triggering the activation
	time.Sleep(1 * time.Second)

	// Check if ZIA_ACTIVATION is set to a truthy value before triggering activation
	if shouldActivate() {
		if activationErr := triggerActivation(ctx, zClient); activationErr != nil {
			return diag.FromErr(activationErr)
		}
	} else {
		log.Printf("[INFO] Skipping configuration activation due to ZIA_ACTIVATION env var not being set to true.")
	}

	return resourceMobileMalwareProtectionPolicyRead(ctx, d, meta)
}
