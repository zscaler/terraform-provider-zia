package zia

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

func TestAccResourceATPMalwarePolicy_Basic(t *testing.T) {
	resourceName := "zia_atp_malware_policy.test"

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckResourceATPMalwarePolicyDestroy,
		Steps: []resource.TestStep{
			// Step 1: Create the resource with specific values
			{
				Config: testAccResourceATPMalwarePolicyConfig(false, false),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "block_unscannable_files", "false"),
					resource.TestCheckResourceAttr(resourceName, "block_password_protected_archive_files", "false"),
				),
			},
			// Step 2: Update the resource with new values
			{
				Config: testAccResourceATPMalwarePolicyConfig(true, true),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "block_unscannable_files", "true"),
					resource.TestCheckResourceAttr(resourceName, "block_password_protected_archive_files", "true"),
				),
			},
			// Step 3: Import the resource and verify the state
			{
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccCheckResourceATPMalwarePolicyDestroy(s *terraform.State) error {
	// Implement if there's anything to check upon resource destruction
	return nil
}

// Helper function to generate test configuration for the resource
func testAccResourceATPMalwarePolicyConfig(unscanableFiles, archiveFiles bool) string {
	return fmt.Sprintf(`
resource "zia_atp_malware_policy" "test" {
  block_unscannable_files  = %t
  block_password_protected_archive_files = %t
}
`, unscanableFiles, archiveFiles)
}
