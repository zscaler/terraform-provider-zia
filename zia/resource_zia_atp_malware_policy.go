package zia

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zscaler/zscaler-sdk-go/v3/zscaler/zia/services/malware_protection"
)

func resourceATPMalwarePolicy() *schema.Resource {
	return &schema.Resource{
		ReadContext:   resourceATPMalwarePolicyRead,
		CreateContext: resourceATPMalwarePolicyCreate,
		UpdateContext: resourceATPMalwarePolicyUpdate,
		DeleteContext: resourceFuncNoOp,
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
				diags := resourceATPMalwarePolicyRead(ctx, d, meta)
				if diags.HasError() {
					return nil, fmt.Errorf("failed to read atp malware policy import: %s", diags[0].Summary)
				}
				d.SetId("policy")
				return []*schema.ResourceData{d}, nil
			},
		},
		Schema: map[string]*schema.Schema{
			"block_unscannable_files": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value indicating whether to allow or block users from uploading or downloading files that the Zscaler service is unable to scan.",
			},
			"block_password_protected_archive_files": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value indicating whether to allow or block users from uploading or downloading password-protected files",
			},
		},
	}
}

func resourceATPMalwarePolicyCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	policy := malware_protection.MalwarePolicy{
		BlockUnscannableFiles:              d.Get("block_unscannable_files").(bool),
		BlockPasswordProtectedArchiveFiles: d.Get("block_password_protected_archive_files").(bool),
	}

	_, _, err := malware_protection.UpdateATPMalwarePolicy(ctx, service, policy)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId("policy")

	// Sleep for 1 seconds before potentially triggering the activation
	time.Sleep(1 * time.Second)

	// Check if ZIA_ACTIVATION is set to a truthy value before triggering activation
	if shouldActivate() {
		if activationErr := triggerActivation(zClient); activationErr != nil {
			return diag.FromErr(activationErr)
		}
	} else {
		log.Printf("[INFO] Skipping configuration activation due to ZIA_ACTIVATION env var not being set to true.")
	}

	return resourceATPMalwarePolicyRead(ctx, d, meta)
}

func resourceATPMalwarePolicyRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	resp, err := malware_protection.GetATPMalwarePolicy(ctx, service)
	if err != nil {
		return nil
	}

	if resp != nil {
		d.SetId("policy")
		_ = d.Set("block_unscannable_files", resp.BlockUnscannableFiles)
		_ = d.Set("block_password_protected_archive_files", resp.BlockPasswordProtectedArchiveFiles)

	} else {
		return diag.FromErr(fmt.Errorf("couldn't read atp malware policy"))
	}

	return nil
}

func resourceATPMalwarePolicyUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	policy := malware_protection.MalwarePolicy{
		BlockUnscannableFiles:              d.Get("block_unscannable_files").(bool),
		BlockPasswordProtectedArchiveFiles: d.Get("block_password_protected_archive_files").(bool),
	}

	_, _, err := malware_protection.UpdateATPMalwarePolicy(ctx, service, policy)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("policy")

	// Sleep for 1 seconds before potentially triggering the activation
	time.Sleep(1 * time.Second)

	// Check if ZIA_ACTIVATION is set to a truthy value before triggering activation
	if shouldActivate() {
		if activationErr := triggerActivation(zClient); activationErr != nil {
			return diag.FromErr(activationErr)
		}
	} else {
		log.Printf("[INFO] Skipping configuration activation due to ZIA_ACTIVATION env var not being set to true.")
	}

	return resourceATPMalwarePolicyRead(ctx, d, meta)
}
