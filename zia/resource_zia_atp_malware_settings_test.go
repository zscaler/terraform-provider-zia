package zia

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

func TestAccResourceATPMalwareSettings_Basic(t *testing.T) {
	resourceName := "zia_atp_malware_settings.test"

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckResourceATPMalwareSettingsDestroy,
		Steps: []resource.TestStep{
			// Step 1: Create the resource with specific values
			{
				Config: testAccResourceATPMalwareSettingsConfig(
					false, false, false, false, false, false, false, false, // blocked attributes
					false, false, false, false, false, false, false, false), // capture attributes
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "virus_blocked", "false"),
					resource.TestCheckResourceAttr(resourceName, "virus_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "unwanted_applications_blocked", "false"),
					resource.TestCheckResourceAttr(resourceName, "unwanted_applications_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "trojan_blocked", "false"),
					resource.TestCheckResourceAttr(resourceName, "trojan_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "worm_blocked", "false"),
					resource.TestCheckResourceAttr(resourceName, "worm_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "adware_blocked", "false"),
					resource.TestCheckResourceAttr(resourceName, "adware_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "spyware_blocked", "false"),
					resource.TestCheckResourceAttr(resourceName, "spyware_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "ransomware_blocked", "false"),
					resource.TestCheckResourceAttr(resourceName, "ransomware_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "remote_access_tool_blocked", "false"),
					resource.TestCheckResourceAttr(resourceName, "remote_access_tool_capture", "false"),
				),
			},
			// Step 2: Update the resource with new values
			{
				Config: testAccResourceATPMalwareSettingsConfig(
					true, false, true, false, true, false, true, false, // blocked attributes
					true, false, true, false, true, false, true, false), // capture attributes
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "virus_blocked", "true"),
					resource.TestCheckResourceAttr(resourceName, "virus_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "unwanted_applications_blocked", "true"),
					resource.TestCheckResourceAttr(resourceName, "unwanted_applications_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "trojan_blocked", "true"),
					resource.TestCheckResourceAttr(resourceName, "trojan_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "worm_blocked", "true"),
					resource.TestCheckResourceAttr(resourceName, "worm_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "adware_blocked", "true"),
					resource.TestCheckResourceAttr(resourceName, "adware_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "spyware_blocked", "true"),
					resource.TestCheckResourceAttr(resourceName, "spyware_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "ransomware_blocked", "true"),
					resource.TestCheckResourceAttr(resourceName, "ransomware_capture", "false"),
					resource.TestCheckResourceAttr(resourceName, "remote_access_tool_blocked", "true"),
					resource.TestCheckResourceAttr(resourceName, "remote_access_tool_capture", "false"),
				),
			},
			// Step 3: Import the resource and verify the state
			{
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccCheckResourceATPMalwareSettingsDestroy(s *terraform.State) error {
	// Implement if there's anything to check upon resource destruction
	return nil
}

// Helper function to generate test configuration for the resource
func testAccResourceATPMalwareSettingsConfig(
	virusBlocked, unwantedApplicationsBlocked, trojanBlocked, wormBlocked, adwareBlocked, spywareBlocked, ransomwareBlocked, remoteAccessToolBlocked bool, // blocked attributes
	virusCapture, unwantedApplicationsCapture, trojanCapture, wormCapture, adwareCapture, spywareCapture, ransomwareCapture, remoteAccessToolCapture bool, // capture attributes
) string {
	return fmt.Sprintf(`
resource "zia_atp_malware_settings" "test" {
  virus_blocked                = %t
  virus_capture                = %t
  unwanted_applications_blocked = %t
  unwanted_applications_capture = %t
  trojan_blocked               = %t
  trojan_capture               = %t
  worm_blocked                 = %t
  worm_capture                 = %t
  adware_blocked               = %t
  adware_capture               = %t
  spyware_blocked              = %t
  spyware_capture              = %t
  ransomware_blocked           = %t
  ransomware_capture           = %t
  remote_access_tool_blocked   = %t
  remote_access_tool_capture   = %t
}
`,
		virusBlocked, virusCapture,
		unwantedApplicationsBlocked, unwantedApplicationsCapture,
		trojanBlocked, trojanCapture,
		wormBlocked, wormCapture,
		adwareBlocked, adwareCapture,
		spywareBlocked, spywareCapture,
		ransomwareBlocked, ransomwareCapture,
		remoteAccessToolBlocked, remoteAccessToolCapture)
}
