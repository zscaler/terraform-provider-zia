package zia

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zscaler/zscaler-sdk-go/v3/zscaler/zia/services/malware_protection"
)

func resourceATPMalwareSettings() *schema.Resource {
	return &schema.Resource{
		ReadContext:   resourceATPMalwareSettingsRead,
		CreateContext: resourceATPMalwareSettingsCreate,
		UpdateContext: resourceATPMalwareSettingsUpdate,
		DeleteContext: resourceFuncNoOp,
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
				diags := resourceATPMalwareSettingsRead(ctx, d, meta)
				if diags.HasError() {
					return nil, fmt.Errorf("failed to read atp malware settings import: %s", diags[0].Summary)
				}
				d.SetId("malware_settings")
				return []*schema.ResourceData{d}, nil
			},
		},
		Schema: map[string]*schema.Schema{
			"virus_blocked": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value that indicates if malicious programs that cause damage to systems and data are allowed or blocked.",
			},
			"virus_capture": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for viruses",
			},
			"unwanted_applications_blocked": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value that allows or blocks unwanted files that are downloaded alongside intentional programs downloaded by users",
			},
			"unwanted_applications_capture": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for unwanted applications",
			},
			"trojan_blocked": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value that allows or blocks malicious programs such as Trojan viruses that are presented as beneficial or useful",
			},
			"trojan_capture": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for Trojan viruses",
			},
			"worm_blocked": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value indicating whether malicious programs that duplicate themselves to spread malicious code to other devices are allowed or blocked",
			},
			"worm_capture": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for worms",
			},
			"adware_blocked": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value indicating whether malicious files that automatically render advertisements and install adware are allowed or blocked",
			},
			"adware_capture": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for adware",
			},
			"spyware_blocked": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value indicating whether malicious files that covertly gather information about a user or an organization are allowed or blocked",
			},
			"spyware_capture": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for spyware",
			},
			"ransomware_blocked": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value specifying whether to allow or block malicious programs that can encrypt files and prevent users from accessing their devices, files, or data until a ransom payment is made.",
			},
			"ransomware_capture": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for ransomware",
			},
			"remote_access_tool_blocked": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value specifying whether to allow or block file download from tools that are common from remote access sites",
			},
			"remote_access_tool_capture": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for remote access tools",
			},
		},
	}
}

func resourceATPMalwareSettingsCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	req := expandATPMalwareSettings(d)

	_, _, err := malware_protection.UpdateATPMalwareSettings(ctx, service, req)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId("malware_settings")

	// Sleep for 1 seconds before potentially triggering the activation
	time.Sleep(1 * time.Second)

	// Check if ZIA_ACTIVATION is set to a truthy value before triggering activation
	if shouldActivate() {
		if activationErr := triggerActivation(ctx, zClient); activationErr != nil {
			return diag.FromErr(activationErr)
		}
	} else {
		log.Printf("[INFO] Skipping configuration activation due to ZIA_ACTIVATION env var not being set to true.")
	}

	return resourceATPMalwareSettingsRead(ctx, d, meta)
}

func resourceATPMalwareSettingsRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	resp, err := malware_protection.GetATPMalwareSettings(ctx, service)
	if err != nil {
		return nil
	}

	if resp != nil {
		d.SetId("malware_settings")
		_ = d.Set("virus_blocked", resp.VirusBlocked)
		_ = d.Set("virus_capture", resp.VirusCapture)
		_ = d.Set("unwanted_applications_blocked", resp.UnwantedApplicationsBlocked)
		_ = d.Set("unwanted_applications_capture", resp.UnwantedApplicationsCapture)
		_ = d.Set("trojan_blocked", resp.TrojanBlocked)
		_ = d.Set("trojan_capture", resp.TrojanCapture)
		_ = d.Set("worm_blocked", resp.WormBlocked)
		_ = d.Set("worm_capture", resp.WormCapture)
		_ = d.Set("adware_blocked", resp.AdwareBlocked)
		_ = d.Set("adware_capture", resp.AdwareCapture)
		_ = d.Set("spyware_blocked", resp.SpywareBlocked)
		_ = d.Set("spyware_capture", resp.SpywareCapture)
		_ = d.Set("ransomware_blocked", resp.RansomwareBlocked)
		_ = d.Set("ransomware_capture", resp.RansomwareCapture)
		_ = d.Set("remote_access_tool_blocked", resp.RemoteAccessToolBlocked)
		_ = d.Set("remote_access_tool_capture", resp.RemoteAccessToolCapture)
	} else {
		return diag.FromErr(fmt.Errorf("couldn't read atp malware settings"))
	}

	return nil
}

func resourceATPMalwareSettingsUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	req := expandATPMalwareSettings(d)

	_, _, err := malware_protection.UpdateATPMalwareSettings(ctx, service, req)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("malware_settings")

	// Sleep for 1 seconds before potentially triggering the activation
	time.Sleep(1 * time.Second)

	// Check if ZIA_ACTIVATION is set to a truthy value before triggering activation
	if shouldActivate() {
		if activationErr := triggerActivation(ctx, zClient); activationErr != nil {
			return diag.FromErr(activationErr)
		}
	} else {
		log.Printf("[INFO] Skipping configuration activation due to ZIA_ACTIVATION env var not being set to true.")
	}

	return resourceATPMalwareSettingsRead(ctx, d, meta)
}

func expandATPMalwareSettings(d *schema.ResourceData) malware_protection.MalwareSettings {
	result := malware_protection.MalwareSettings{
		VirusBlocked:                d.Get("virus_blocked").(bool),
		VirusCapture:                d.Get("virus_capture").(bool),
		UnwantedApplicationsBlocked: d.Get("unwanted_applications_blocked").(bool),
		UnwantedApplicationsCapture: d.Get("unwanted_applications_capture").(bool),
		TrojanBlocked:               d.Get("trojan_blocked").(bool),
		TrojanCapture:               d.Get("trojan_capture").(bool),
		WormBlocked:                 d.Get("worm_blocked").(bool),
		WormCapture:                 d.Get("worm_capture").(bool),
		AdwareBlocked:               d.Get("adware_blocked").(bool),
		AdwareCapture:               d.Get("adware_capture").(bool),
		SpywareBlocked:              d.Get("spyware_blocked").(bool),
		SpywareCapture:              d.Get("spyware_capture").(bool),
		RansomwareBlocked:           d.Get("ransomware_blocked").(bool),
		RansomwareCapture:           d.Get("ransomware_capture").(bool),
		RemoteAccessToolBlocked:     d.Get("remote_access_tool_blocked").(bool),
		RemoteAccessToolCapture:     d.Get("remote_access_tool_capture").(bool),
	}
	return result
}
