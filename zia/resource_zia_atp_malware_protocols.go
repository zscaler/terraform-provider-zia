package zia

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zscaler/zscaler-sdk-go/v3/zscaler/zia/services/malware_protection"
)

func resourceATPMalwareProtocols() *schema.Resource {
	return &schema.Resource{
		ReadContext:   resourceATPMalwareProtocolRead,
		CreateContext: resourceATPMalwareProtocolCreate,
		UpdateContext: resourceATPMalwareProtocolUpdate,
		DeleteContext: resourceFuncNoOp,
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
				diags := resourceATPMalwareProtocolRead(ctx, d, meta)
				if diags.HasError() {
					return nil, fmt.Errorf("failed to read atp malware protocol import: %s", diags[0].Summary)
				}
				d.SetId("protocol")
				return []*schema.ResourceData{d}, nil
			},
		},
		Schema: map[string]*schema.Schema{
			"inspect_http": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for malicious content in real time",
			},
			"inspect_ftp_over_http": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time",
			},
			"inspect_ftp": {
				Type:        schema.TypeBool,
				Computed:    true,
				Optional:    true,
				Description: "A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time",
			},
		},
	}
}

func resourceATPMalwareProtocolCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	protocol := malware_protection.ATPMalwareProtocols{
		InspectHttp:        d.Get("inspect_http").(bool),
		InspectFtpOverHttp: d.Get("inspect_ftp_over_http").(bool),
		InspectFtp:         d.Get("inspect_ftp").(bool),
	}

	_, _, err := malware_protection.UpdateATPMalwareProtocol(ctx, service, protocol)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId("protocol")

	// Sleep for 1 seconds before potentially triggering the activation
	time.Sleep(1 * time.Second)

	// Check if ZIA_ACTIVATION is set to a truthy value before triggering activation
	if shouldActivate() {
		if activationErr := triggerActivation(ctx, zClient); activationErr != nil {
			return diag.FromErr(activationErr)
		}
	} else {
		log.Printf("[INFO] Skipping configuration activation due to ZIA_ACTIVATION env var not being set to true.")
	}

	return resourceATPMalwareProtocolRead(ctx, d, meta)
}

func resourceATPMalwareProtocolRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	resp, err := malware_protection.GetATPMalwareProtocols(ctx, service)
	if err != nil {
		return nil
	}

	if resp != nil {
		d.SetId("protocol")
		_ = d.Set("inspect_http", resp.InspectHttp)
		_ = d.Set("inspect_ftp_over_http", resp.InspectFtpOverHttp)
		_ = d.Set("inspect_ftp", resp.InspectFtp)

	} else {
		return diag.FromErr(fmt.Errorf("couldn't read atp malware protocols"))
	}

	return nil
}

func resourceATPMalwareProtocolUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	protocol := malware_protection.ATPMalwareProtocols{
		InspectHttp:        d.Get("inspect_http").(bool),
		InspectFtpOverHttp: d.Get("inspect_ftp_over_http").(bool),
		InspectFtp:         d.Get("inspect_ftp").(bool),
	}

	_, _, err := malware_protection.UpdateATPMalwareProtocol(ctx, service, protocol)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("protocol")

	// Sleep for 1 seconds before potentially triggering the activation
	time.Sleep(1 * time.Second)

	// Check if ZIA_ACTIVATION is set to a truthy value before triggering activation
	if shouldActivate() {
		if activationErr := triggerActivation(ctx, zClient); activationErr != nil {
			return diag.FromErr(activationErr)
		}
	} else {
		log.Printf("[INFO] Skipping configuration activation due to ZIA_ACTIVATION env var not being set to true.")
	}

	return resourceATPMalwareProtocolRead(ctx, d, meta)
}
