package zia

import (
	"context"
	"fmt"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zscaler/zscaler-sdk-go/v3/zscaler/zia/services/saas_security_api/casb_malware_rules"
)

func dataSourceCasbMalwareRules() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCasbMalwareRulesRead,
		Schema: map[string]*schema.Schema{
			"id": {
				Type:        schema.TypeInt,
				Optional:    true,
				Computed:    true,
				Description: "The type of SaaS Security Data at Rest Scanning Malware rule",
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: "Rule name",
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: "The type of SaaS Security Data at Rest Scanning Malware rule",
			},
			"order": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: "Order of rule execution with respect to other SaaS Security Data at Rest Scanning Malware rules",
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Administrative state of the rule",
			},
			"action": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The configured action for the policy rule",
			},
			"access_control": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Access privilege of this rule based on the admin's Role Based Authorization (RBA) state",
			},

			"quarantine_location": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Location where all the quarantined files are moved and necessary actions are taken by either deleting or restoring the data",
			},
			"scan_inbound_email_link": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Enables or disables the scan inbound email link",
			},
			"last_modified_time": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: "Timestamp of when the rule was last modified",
			},
			"cloud_app_tenant_ids": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Name-ID pairs of the cloud application tenants for which the rule is applied",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "A unique identifier for an entity",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The configured name of the entity",
						},
					},
				},
			},
			"cloud_app_tenants": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Name-ID pairs of the cloud application tenants for which the rule is applied",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "A unique identifier for an entity",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The configured name of the entity",
						},
					},
				},
			},
			"buckets": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "The buckets for the Zscaler service to inspect for sensitive data",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "A unique identifier for an entity",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The configured name of the entity",
						},
					},
				},
			},
			"labels": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Name-ID pairs of rule labels associated with the rule",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "A unique identifier for an entity",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The configured name of the entity",
						},
					},
				},
			},
			"casb_email_label": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Name-ID of the email label associated with the rule",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "A unique identifier for an entity",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The configured name of the entity",
						},
					},
				},
			},
			"casb_tombstone_template": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Name-ID of the quarantine tombstone template associated with the rule",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "A unique identifier for an entity",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The configured name of the entity",
						},
					},
				},
			},
			"last_modified_by": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Admin user that last modified the rule",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Identifier that uniquely identifies an entity",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Identifier that uniquely identifies an entity",
						},
						"extensions": {
							Type:        schema.TypeMap,
							Computed:    true,
							Description: "Additional information about the entity",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},
		},
	}
}

func dataSourceCasbMalwareRulesRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	zClient := meta.(*Client)
	service := zClient.Service

	ruleType, ok := d.Get("type").(string)
	if !ok || ruleType == "" {
		return diag.FromErr(fmt.Errorf("type must be specified"))
	}

	var resp *casb_malware_rules.CasbMalwareRules
	id, idOk := getIntFromResourceData(d, "id")
	if idOk {
		log.Printf("[INFO] Getting data for casb dlp rule rule id: %d and type: %s\n", id, ruleType)
		res, err := casb_malware_rules.GetByRuleID(ctx, service, ruleType, id)
		if err != nil {
			return diag.FromErr(err)
		}
		resp = res
	}

	name, nameOk := d.Get("name").(string)
	if resp == nil && nameOk && name != "" {
		log.Printf("[INFO] Getting data for casb dlp rule rule: %s and type: %s\n", name, ruleType)
		res, err := casb_malware_rules.GetByRuleType(ctx, service, ruleType)
		if err != nil {
			return diag.FromErr(err)
		}

		// Look for the rule with the specified name
		for _, rule := range res {
			if rule.Name == name {
				resp = &rule
				break
			}
		}
	}

	if resp != nil {
		d.SetId(fmt.Sprintf("%d", resp.ID))
		_ = d.Set("id", resp.ID)
		_ = d.Set("name", resp.Name)
		_ = d.Set("type", resp.Type)
		_ = d.Set("order", resp.Order)
		_ = d.Set("state", resp.State)
		_ = d.Set("action", resp.Action)
		_ = d.Set("quarantine_location", resp.QuarantineLocation)
		_ = d.Set("scan_inbound_email_link", resp.ScanInboundEmailLink)
		_ = d.Set("access_control", resp.AccessControl)
		_ = d.Set("last_modified_time", resp.LastModifiedTime)

		if err := d.Set("buckets", flattenIDNameExtensions(resp.Buckets)); err != nil {
			return diag.FromErr(err)
		}
		if err := d.Set("labels", flattenIDNameExtensions(resp.Labels)); err != nil {
			return diag.FromErr(err)
		}
		if err := d.Set("cloud_app_tenant_ids", flattenIDNameExtensions(resp.CloudAppTenantIDs)); err != nil {
			return diag.FromErr(err)
		}
		if err := d.Set("cloud_app_tenants", flattenIDNameExtensions(resp.CloudAppTenants)); err != nil {
			return diag.FromErr(err)
		}

		if err := d.Set("casb_tombstone_template", flattenCustomIDNameSet(resp.CasbTombstoneTemplate)); err != nil {
			return diag.FromErr(err)
		}
		if err := d.Set("casb_email_label", flattenCustomIDNameSet(resp.CasbEmailLabel)); err != nil {
			return diag.FromErr(err)
		}

		if err := d.Set("last_modified_by", flattenIDExtensionsList(resp.LastModifiedBy)); err != nil {
			return diag.FromErr(err)
		}
	} else {
		return diag.FromErr(fmt.Errorf("couldn't find any ccasb dlp malware rule with name '%s' or id '%d'", name, id))
	}

	return nil
}
